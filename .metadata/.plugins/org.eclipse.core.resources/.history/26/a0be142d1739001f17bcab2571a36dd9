package com.java.customer;

import java.util.List;

import org.hibernate.Criteria;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.Transaction;
import org.hibernate.criterion.Restrictions;

public class CustomerDaoImpl implements CustomerDao {

	SessionFactory sessionFactory;
	Session session;

	public int getCustId() {
		sessionFactory = SessionHelper.getConnection();
		session = sessionFactory.openSession();
		Criteria cr = session.createCriteria(Customer.class);
		List<Customer> customerList = cr.list();
		session.close(); // Close session after use
		if (!customerList.isEmpty()) {
			return customerList.get(customerList.size() - 1).getCustId();
		}
		return 0; // Handle case where no customers exist
	}

	@Override
	public String addCustomer(Customer customer) {
		customer.setCustStatus(1);
		sessionFactory = SessionHelper.getConnection();
		session = sessionFactory.openSession();
		Transaction trans = session.beginTransaction();
		session.save(customer);
		trans.commit();
		session.close();

		// Generate OTP and save
		Otp otp = new Otp();
		int cid = getCustId();
		String otpCode = OtpGen.generateOtp();
		otp.setCustId(cid);
		otp.setOtpCode(otpCode);
		otp.setOtpPurpose("Creating Account");
		otp.setOtpStatus("ACTIVE");

		session = sessionFactory.openSession();
		trans = session.beginTransaction();
		session.save(otp);
		trans.commit();
		session.close();

		// Send OTP via email
		String result = "Your OTP Code: " + otpCode;
		SendMail.mail(customer.getCustEmail(), "One Time Password", result);

		return "Account Created. OTP sent to your email.";
	}

	public int getCustId(String custUser) {
		sessionFactory = SessionHelper.getConnection();
		session = sessionFactory.openSession();
		Criteria cr = session.createCriteria(Customer.class);
		cr.add(Restrictions.eq("custUserName", custUser));
		Customer customer = (Customer) cr.uniqueResult();
		session.close(); // Close session after use
		if (customer != null) {
			return customer.getCustId();
		}
		return 0; // Handle case where customer not found
	}

	@Override
	public int validateOtp(String user, String otp) {
		int cid = getCustId(user);
		sessionFactory = SessionHelper.getConnection();
		session = sessionFactory.openSession();
		Criteria cr = session.createCriteria(Otp.class);
		cr.add(Restrictions.eq("custId", cid));
		cr.add(Restrictions.eq("otpCode", otp));
		cr.add(Restrictions.eq("otpStatus", "ACTIVE"));
		Otp otpObj = (Otp) cr.uniqueResult();
		session.close(); // Close session after use
		if (otpObj != null) {
			return 1; // Valid OTP
		}
		return 0; // Invalid OTP
	}

}
